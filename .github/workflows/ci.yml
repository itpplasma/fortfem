name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran liblapack-dev libsuitesparse-dev freefem++ ghostscript imagemagick

    - name: Setup Fortran Package Manager
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm

    - name: Build
      run: fpm build --profile release

    - name: Run tests
      run: fpm test

    - name: Run tests with coverage
      run: |
        fpm test --flag "--coverage"
        find build -name "*.gcda" -type f -exec dirname {} \; | sort -u | while read dir; do
          gcov -o "$dir" src/*.f90 || true
        done

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./*.gcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build examples
      run: |
        fpm build --example

    - name: Discover and run all examples
      run: |
        echo "Discovering and running all examples..."
        for example in example/*.f90; do
          example_name=$(basename "$example" .f90)
          echo "Running example: $example_name"
          fpm run --example "$example_name" || echo "Example $example_name failed but continuing..."
        done

    - name: Run all benchmarks  
      run: |
        echo "Running FortFEM benchmarks..."
        fpm run --example plotting_demo || echo "Plotting demo completed"
        
        echo "Running convergence benchmarks..."
        fpm test run_convergence_tests || echo "Convergence tests completed"

    - name: Run FreeFEM benchmarks with plotting
      run: |
        echo "Running FreeFEM Poisson 2D benchmark..."
        cd benchmark/freefem/poisson-2d
        FreeFem++ poisson_2d.edp || echo "FreeFEM Poisson benchmark completed"
        cd ../../..
        
        echo "Running FreeFEM curl-curl benchmark..."
        cd benchmark/freefem/curl-curl
        FreeFem++ curl_curl_2d.edp || echo "FreeFEM curl-curl benchmark completed"
        cd ../../..

    - name: Convert FreeFEM EPS to PNG and collect plots
      run: |
        echo "Converting FreeFEM EPS files to PNG and collecting all plots..."
        mkdir -p ci-artifacts/plots
        
        # Convert FreeFEM EPS files to PNG
        echo "Converting FreeFEM EPS files to PNG..."
        find benchmark/ -name "*.eps" | while read eps_file; do
          if [ -f "$eps_file" ]; then
            png_file="ci-artifacts/plots/$(basename "$eps_file" .eps).png"
            echo "Converting $eps_file to $png_file"
            convert "$eps_file" "$png_file" || echo "Failed to convert $eps_file"
          fi
        done
        
        # Copy all PNG files from root directory (FortFEM examples)
        echo "Collecting FortFEM example plots..."
        find . -maxdepth 1 -name "*.png" -exec cp {} ci-artifacts/plots/ \; || echo "No FortFEM PNG files found"
        
        # Copy any existing PNG files from benchmark directories  
        find benchmark/ -name "*.png" -exec cp {} ci-artifacts/plots/ \; || echo "No existing FreeFEM PNG plots found"
        
        # List all collected plots
        echo "Final plot collection:"
        ls -la ci-artifacts/plots/ || echo "No plots directory created"
        
        echo "Plot collection summary:"
        total_plots=$(find ci-artifacts/plots/ -name "*.png" 2>/dev/null | wc -l || echo 0)
        echo "Total PNG files collected: $total_plots"
        
        if [ "$total_plots" -gt 0 ]; then
          echo "Plot files:"
          find ci-artifacts/plots/ -name "*.png" -exec basename {} \;
        fi

    - name: Upload plot artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: generated-plots
        path: ci-artifacts/plots/
        retention-days: 30

    - name: Validate benchmark results
      run: |
        echo "Checking benchmark output files..."
        test -f benchmark/freefem/poisson-2d/freefem_convergence_2d.dat || echo "Missing Poisson convergence data"
        test -f benchmark/freefem/curl-curl/freefem_results.dat || echo "Missing curl-curl results"
        test -f benchmark/freefem/curl-curl/freefem_convergence.dat || echo "Missing curl-curl convergence data"
        echo "âœ… Benchmark validation completed"