-- FreeFem++ v4.15 (Sat Jul 19 06:53:40 CEST 2025 - git no git)
   file : poisson_2d.edp
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : // FreeFEM++ script for 2D Poisson equation
    2 : // Benchmark reference for FortFEM Poisson 2D implementation
    3 : //
    4 : // Problem: -Δu = f in (0,1)×(0,1)
    5 : //          u = 0 on ∂Ω (Dirichlet BC)
    6 : //
    7 : // Exact solution: u(x,y) = sin(π*x)*sin(π*y)
    8 : // Source term: f(x,y) = 2*π²*sin(π*x)*sin(π*y)
    9 : 
   10 : // Exact solution and source term
   11 : func ExactU = sin(pi*x)*sin(pi*y);
   12 : func Source = 2*pi*pi*sin(pi*x)*sin(pi*y);
   13 : 
   14 : cout << "\n=== FreeFEM Poisson 2D Convergence Study ===" << endl;
   15 : cout << "h		L2_error	H1_error	DOFs" << endl;
   16 : 
   17 : ofstream convfile("freefem_convergence_2d.dat");
   18 : convfile << "# h L2_error H1_error DOFs" << endl;
   19 : 
   20 : // Convergence study
   21 : for (int level = 1; level <= 5; level++) {
   22 :     int n = 4 * 2^(level-1);  // 4, 8, 16, 32, 64 elements per side
   23 :     real h = 1.0/n;
   24 :     
   25 :     // Create rectangular mesh on unit square [0,1]×[0,1]
   26 :     mesh Th = square(n, n, [x, y]);
   27 :     
   28 :     // P1 finite element space
   29 :     fespace Vh(Th, P1);
   30 :     Vh u, v;
   31 :     
   32 :     // Variational form: ∫ ∇u·∇v dx = ∫ f*v dx
   33 :     varf poisson(u, v) = 
   34 :         int2d(Th)( dx(u)*dx(v) + dy(u)*dy(v) )  // stiffness matrix
   35 :         + on(1, 2, 3, 4, u=0);                  // Dirichlet BC on all boundaries
   36 :     
   37 :     varf rhs(u, v) = 
   38 :         int2d(Th)( Source*v )                   // load vector
   39 :         + on(1, 2, 3, 4, u=0);                  // Dirichlet BC
   40 :     
   41 :     // Assemble and solve
   42 :     matrix A = poisson(Vh, Vh);
   43 :     real[int] b = rhs(0, Vh);
   44 :     u[] = A^-1 * b;
   45 :     
   46 :     // Compute errors
   47 :     fespace Ph(Th, P0);  // Piecewise constant for error computation
   48 :     Ph errL2 = abs(u - ExactU);
   49 :     Ph errH1gradx = abs(dx(u) - pi*cos(pi*x)*sin(pi*y));
   50 :     Ph errH1grady = abs(dy(u) - pi*sin(pi*x)*cos(pi*y));
   51 :     
   52 :     real L2norm = sqrt(int2d(Th)(errL2^2));
   53 :     real H1norm = sqrt(int2d(Th)(errL2^2 + errH1gradx^2 + errH1grady^2));
   54 :     
   55 :     cout << h << "	" << L2norm << "	" << H1norm << "	" << Vh.ndof << endl;
   56 :     convfile << h << " " << L2norm << " " << H1norm << " " << Vh.ndof << endl;
   57 : }
   58 : 
   59 : cout << "\nFreeFEM Poisson 2D reference computed successfu
  ... : lly!" << endl;
   60 : cout << "Results saved to freefem_convergence_2d.dat" << endl; sizestack + 1024 =5704  ( 4680 )


=== FreeFEM Poisson 2D Convergence Study ===
h		L2_error	H1_error	DOFs
  -- Square mesh : nb vertices  =25 ,  nb triangles = 32 ,  nb boundary edges 16 rmdup= 0
0.25	0.0928983	0.649831	25
  -- Square mesh : nb vertices  =81 ,  nb triangles = 128 ,  nb boundary edges 32 rmdup= 0
0.125	0.0248354	0.325199	81
  -- Square mesh : nb vertices  =289 ,  nb triangles = 512 ,  nb boundary edges 64 rmdup= 0
freeglut (ffglut): failed to open display ''
0.0625	0.00631995	0.16257	289
  -- Square mesh : nb vertices  =1089 ,  nb triangles = 2048 ,  nb boundary edges 128 rmdup= 0
0.03125	0.00158715	0.0812793	1089
  -- Square mesh : nb vertices  =4225 ,  nb triangles = 8192 ,  nb boundary edges 256 rmdup= 0
0.015625	0.000397238	0.0406389	4225

FreeFEM Poisson 2D reference computed successfully!
Results saved to freefem_convergence_2d.dat
times: compile 0.00224s, execution 0.047173s,  mpirank:0
