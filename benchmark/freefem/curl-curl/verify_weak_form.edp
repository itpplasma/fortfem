// Verification script for curl-curl weak form
// Shows the weak form terms explicitly

load "Element_Mixte"

// Simple mesh
mesh Th = square(5, 5);

// RT0Ortho for H(curl) - Nédélec edge elements
fespace Vh(Th, RT0Ortho);
Vh [Ex, Ey], [vx, vy];

cout << "\n=== Curl-Curl Weak Form Verification ===" << endl;
cout << "\nProblem: curl(curl(E)) + E = f" << endl;
cout << "Weak form: a(E,v) = (f,v)" << endl;
cout << "where a(E,v) = ∫_Ω curl(E)·curl(v) dx + ∫_Ω E·v dx" << endl;

// Define bilinear form explicitly showing each term
varf BilinearForm([Ex, Ey], [vx, vy]) = 
    int2d(Th)(
        // CURL-CURL TERM: ∫_Ω curl(E)·curl(v) dx
        // In 2D: curl(E) = ∂Ey/∂x - ∂Ex/∂y (scalar)
        // This is implemented as:
        (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))
        
        // MASS TERM: ∫_Ω E·v dx  
        // This is the L2 inner product:
        + Ex*vx + Ey*vy
    )
    // Boundary conditions
    + on(1, 2, 3, 4, Ex=0, Ey=0);

cout << "\nBilinear form components:" << endl;
cout << "1. Curl-curl: (∂Ey/∂x - ∂Ex/∂y) * (∂vy/∂x - ∂vx/∂y)" << endl;
cout << "   FreeFEM: (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))" << endl;
cout << "2. Mass: Ex*vx + Ey*vy" << endl;

// Test with manufactured solution E = [y, x]
// curl(E) = ∂x/∂x - ∂y/∂y = 1 - 1 = 0
func exactEx = y;
func exactEy = x;
func exactCurl = 0.0;

// For this solution: curl(curl(E)) = 0, so f = E
func fx = y;
func fy = x;

varf RHS([Ex, Ey], [vx, vy]) = 
    int2d(Th)(
        fx*vx + fy*vy
    )
    + on(1, 2, 3, 4, Ex=0, Ey=0);

// Assemble and solve
matrix A = BilinearForm(Vh, Vh);
real[int] b = RHS(0, Vh);
Ex[] = A^-1 * b;

// Verify solution
real L2err = sqrt(int2d(Th)((Ex - exactEx)^2 + (Ey - exactEy)^2));
cout << "\nTest case: E = [y, x], curl(E) = 0" << endl;
cout << "L2 error = " << L2err << endl;

// Matrix properties
cout << "\nMatrix properties:" << endl;
cout << "Matrix size: " << A.n << " x " << A.m << endl;
cout << "Number of DOFs: " << Vh.ndof << endl;

// Test curl computation
fespace Ph(Th, P0);
Ph curlComp = dx(Ey) - dy(Ex);
Ph curlExactVal = exactCurl;
real curlErr = sqrt(int2d(Th)((curlComp - curlExactVal)^2));
cout << "Curl error = " << curlErr << endl;

cout << "\nWeak form verification complete!" << endl;