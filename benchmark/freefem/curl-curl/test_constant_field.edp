// Test RT0Ortho with constant field solution
// This should be exactly representable by the finite element space
//
// Problem: curl(curl(E)) + E = f in Ω
//          E × n = 0 on ∂Ω
//
// Test solution: E = [1, 0] (constant)
// curl(E) = 0
// curl(curl(E)) = 0
// So: f = [1, 0]

load "Element_Mixte"

// Create simple mesh
int n = 10;
mesh Th = square(n, n);

// RT0Ortho = Nédélec edge elements for H(curl)
fespace Vh(Th, RT0Ortho);
Vh [Ex, Ey], [vx, vy];

// Exact solution
func ExactEx = 1.0;
func ExactEy = 0.0;
func ExactCurl = 0.0;

// Right-hand side: f = curl(curl(E)) + E = [0, 0] + [1, 0] = [1, 0]
func fx = 1.0;
func fy = 0.0;

// Weak formulation
varf a([Ex, Ey], [vx, vy]) = 
    int2d(Th)(
        // curl-curl term
        (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))
        // mass term
        + Ex*vx + Ey*vy
    )
    + on(1, 2, 3, 4, Ex=0, Ey=0);

varf l([Ex, Ey], [vx, vy]) = 
    int2d(Th)(
        fx*vx + fy*vy
    )
    + on(1, 2, 3, 4, Ex=0, Ey=0);

// Solve
matrix A = a(Vh, Vh);
real[int] b = l(0, Vh);
Ex[] = A^-1 * b;

// Compute errors
real L2err = sqrt(int2d(Th)((Ex - ExactEx)^2 + (Ey - ExactEy)^2));
real curlErr = sqrt(int2d(Th)((dx(Ey) - dy(Ex) - ExactCurl)^2));

cout << "\n=== Constant Field Test ===" << endl;
cout << "DOFs = " << Vh.ndof << endl;
cout << "L2 error = " << L2err << endl;
cout << "Curl error = " << curlErr << endl;

// Check at a few points
real x0 = 0.5, y0 = 0.5;
cout << "\nAt point (" << x0 << ", " << y0 << "):" << endl;
cout << "E = [" << Ex(x0, y0) << ", " << Ey(x0, y0) << "]" << endl;
cout << "Expected: [1, 0]" << endl;

// Save for inspection
{
    ofstream file("constant_field_test.dat");
    file << "# Test results for E = [1, 0]" << endl;
    file << "# DOFs = " << Vh.ndof << endl;
    file << "# L2_error = " << L2err << endl;
    file << "# Curl_error = " << curlErr << endl;
}

cout << "\nTest completed. Results saved to constant_field_test.dat" << endl;