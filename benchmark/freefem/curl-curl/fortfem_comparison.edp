// Direct comparison with FortFEM implementation
// Solves the same test cases for validation

load "Element_Mixte"

cout << endl << "=== FreeFEM vs FortFEM Comparison ===" << endl;
cout << "Using RT0Ortho (Nedelec edge elements)" << endl;

// Test 1: Constant field E = [1, 0]
{
    cout << endl << "--- Test 1: Constant field E = [1, 0] ---" << endl;
    
    mesh Th = square(10, 10);
    fespace Vh(Th, RT0Ortho);
    Vh [Ex, Ey], [vx, vy];
    
    // Exact solution
    func exactEx = 1.0;
    func exactEy = 0.0;
    
    // RHS: f = curl(curl(E)) + E = [0, 0] + [1, 0] = [1, 0]
    func fx = 1.0;
    func fy = 0.0;
    
    varf a([Ex, Ey], [vx, vy]) = 
        int2d(Th)(
            (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))
            + Ex*vx + Ey*vy
        )
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    varf l([Ex, Ey], [vx, vy]) = 
        int2d(Th)(fx*vx + fy*vy)
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    matrix A = a(Vh, Vh);
    real[int] b = l(0, Vh);
    Ex[] = A^-1 * b;
    
    real L2err = sqrt(int2d(Th)((Ex - exactEx)^2 + (Ey - exactEy)^2));
    real curlErr = sqrt(int2d(Th)((dx(Ey) - dy(Ex))^2));
    
    cout << "DOFs = " << Vh.ndof << endl;
    cout << "L2 error = " << L2err << endl;
    cout << "H(curl) error = " << curlErr << endl;
    cout << "Expected: L2 error should be ~0 for constant field" << endl;
}

// Test 2: Linear field E = [y, x]  
{
    cout << endl << "--- Test 2: Linear field E = [y, x] ---" << endl;
    
    mesh Th = square(10, 10);
    fespace Vh(Th, RT0Ortho);
    Vh [Ex, Ey], [vx, vy];
    
    // Exact solution
    func exactEx = y;
    func exactEy = x;
    func exactCurl = 0.0;
    
    // RHS: f = curl(curl(E)) + E = [0, 0] + [y, x] = [y, x]
    func fx = y;
    func fy = x;
    
    varf a([Ex, Ey], [vx, vy]) = 
        int2d(Th)(
            (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))
            + Ex*vx + Ey*vy
        )
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    varf l([Ex, Ey], [vx, vy]) = 
        int2d(Th)(fx*vx + fy*vy)
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    matrix A = a(Vh, Vh);
    real[int] b = l(0, Vh);
    Ex[] = A^-1 * b;
    
    real L2err = sqrt(int2d(Th)((Ex - exactEx)^2 + (Ey - exactEy)^2));
    real curlErr = sqrt(int2d(Th)((dx(Ey) - dy(Ex) - exactCurl)^2));
    
    cout << "DOFs = " << Vh.ndof << endl;
    cout << "L2 error = " << L2err << endl;
    cout << "H(curl) error = " << curlErr << endl;
}

// Test 3: Polynomial field E = [x*y, x^2]
{
    cout << endl << "--- Test 3: Polynomial field E = [x*y, x^2] ---" << endl;
    
    mesh Th = square(10, 10);
    fespace Vh(Th, RT0Ortho);
    Vh [Ex, Ey], [vx, vy];
    
    // Exact solution
    func exactEx = x*y;
    func exactEy = x*x;
    func exactCurl = x;  // curl = 2*x - x = x
    
    // RHS: f = curl(curl(E)) + E
    // curl(curl(E)) = ∂(curl)/∂y - 0 = ∂x/∂y = 0
    // So f = [x*y, x^2]
    func fx = x*y;
    func fy = x*x;
    
    varf a([Ex, Ey], [vx, vy]) = 
        int2d(Th)(
            (dx(Ey) - dy(Ex)) * (dx(vy) - dy(vx))
            + Ex*vx + Ey*vy
        )
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    varf l([Ex, Ey], [vx, vy]) = 
        int2d(Th)(fx*vx + fy*vy)
        + on(1, 2, 3, 4, Ex=0, Ey=0);
    
    matrix A = a(Vh, Vh);
    real[int] b = l(0, Vh);
    Ex[] = A^-1 * b;
    
    real L2err = sqrt(int2d(Th)((Ex - exactEx)^2 + (Ey - exactEy)^2));
    real curlErr = sqrt(int2d(Th)((dx(Ey) - dy(Ex) - exactCurl)^2));
    
    cout << "DOFs = " << Vh.ndof << endl;
    cout << "L2 error = " << L2err << endl;
    cout << "H(curl) error = " << curlErr << endl;
}

cout << endl << "=== Summary ===" << endl;
cout << "RT0Ortho (Nedelec) elements tested with:" << endl;
cout << "1. Constant field - should be exactly representable" << endl;
cout << "2. Linear field - should have small errors" << endl;
cout << "3. Polynomial field - demonstrates convergence behavior" << endl;
cout << endl << "Compare these results with FortFEM implementation!" << endl;